// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/tigerbeetle/tigerbeetle.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TigerBeetle_GetID_FullMethodName               = "/proto.TigerBeetle/GetID"
	TigerBeetle_CreateAccounts_FullMethodName      = "/proto.TigerBeetle/CreateAccounts"
	TigerBeetle_CreateTransfers_FullMethodName     = "/proto.TigerBeetle/CreateTransfers"
	TigerBeetle_LookupAccounts_FullMethodName      = "/proto.TigerBeetle/LookupAccounts"
	TigerBeetle_LookupTransfers_FullMethodName     = "/proto.TigerBeetle/LookupTransfers"
	TigerBeetle_GetAccountTransfers_FullMethodName = "/proto.TigerBeetle/GetAccountTransfers"
	TigerBeetle_GetAccountBalances_FullMethodName  = "/proto.TigerBeetle/GetAccountBalances"
)

// TigerBeetleClient is the client API for TigerBeetle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TigerBeetleClient interface {
	GetID(ctx context.Context, in *GetIDRequest, opts ...grpc.CallOption) (*GetIDReply, error)
	CreateAccounts(ctx context.Context, in *CreateAccountsRequest, opts ...grpc.CallOption) (*CreateAccountsReply, error)
	CreateTransfers(ctx context.Context, in *CreateTransfersRequest, opts ...grpc.CallOption) (*CreateTransfersReply, error)
	LookupAccounts(ctx context.Context, in *LookupAccountsRequest, opts ...grpc.CallOption) (*LookupAccountsReply, error)
	LookupTransfers(ctx context.Context, in *LookupTransfersRequest, opts ...grpc.CallOption) (*LookupTransfersReply, error)
	GetAccountTransfers(ctx context.Context, in *GetAccountTransfersRequest, opts ...grpc.CallOption) (*GetAccountTransfersReply, error)
	GetAccountBalances(ctx context.Context, in *GetAccountBalancesRequest, opts ...grpc.CallOption) (*GetAccountBalancesReply, error)
}

type tigerBeetleClient struct {
	cc grpc.ClientConnInterface
}

func NewTigerBeetleClient(cc grpc.ClientConnInterface) TigerBeetleClient {
	return &tigerBeetleClient{cc}
}

func (c *tigerBeetleClient) GetID(ctx context.Context, in *GetIDRequest, opts ...grpc.CallOption) (*GetIDReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIDReply)
	err := c.cc.Invoke(ctx, TigerBeetle_GetID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerBeetleClient) CreateAccounts(ctx context.Context, in *CreateAccountsRequest, opts ...grpc.CallOption) (*CreateAccountsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountsReply)
	err := c.cc.Invoke(ctx, TigerBeetle_CreateAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerBeetleClient) CreateTransfers(ctx context.Context, in *CreateTransfersRequest, opts ...grpc.CallOption) (*CreateTransfersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransfersReply)
	err := c.cc.Invoke(ctx, TigerBeetle_CreateTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerBeetleClient) LookupAccounts(ctx context.Context, in *LookupAccountsRequest, opts ...grpc.CallOption) (*LookupAccountsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupAccountsReply)
	err := c.cc.Invoke(ctx, TigerBeetle_LookupAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerBeetleClient) LookupTransfers(ctx context.Context, in *LookupTransfersRequest, opts ...grpc.CallOption) (*LookupTransfersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupTransfersReply)
	err := c.cc.Invoke(ctx, TigerBeetle_LookupTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerBeetleClient) GetAccountTransfers(ctx context.Context, in *GetAccountTransfersRequest, opts ...grpc.CallOption) (*GetAccountTransfersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountTransfersReply)
	err := c.cc.Invoke(ctx, TigerBeetle_GetAccountTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerBeetleClient) GetAccountBalances(ctx context.Context, in *GetAccountBalancesRequest, opts ...grpc.CallOption) (*GetAccountBalancesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountBalancesReply)
	err := c.cc.Invoke(ctx, TigerBeetle_GetAccountBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TigerBeetleServer is the server API for TigerBeetle service.
// All implementations must embed UnimplementedTigerBeetleServer
// for forward compatibility.
type TigerBeetleServer interface {
	GetID(context.Context, *GetIDRequest) (*GetIDReply, error)
	CreateAccounts(context.Context, *CreateAccountsRequest) (*CreateAccountsReply, error)
	CreateTransfers(context.Context, *CreateTransfersRequest) (*CreateTransfersReply, error)
	LookupAccounts(context.Context, *LookupAccountsRequest) (*LookupAccountsReply, error)
	LookupTransfers(context.Context, *LookupTransfersRequest) (*LookupTransfersReply, error)
	GetAccountTransfers(context.Context, *GetAccountTransfersRequest) (*GetAccountTransfersReply, error)
	GetAccountBalances(context.Context, *GetAccountBalancesRequest) (*GetAccountBalancesReply, error)
	mustEmbedUnimplementedTigerBeetleServer()
}

// UnimplementedTigerBeetleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTigerBeetleServer struct{}

func (UnimplementedTigerBeetleServer) GetID(context.Context, *GetIDRequest) (*GetIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetID not implemented")
}
func (UnimplementedTigerBeetleServer) CreateAccounts(context.Context, *CreateAccountsRequest) (*CreateAccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccounts not implemented")
}
func (UnimplementedTigerBeetleServer) CreateTransfers(context.Context, *CreateTransfersRequest) (*CreateTransfersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfers not implemented")
}
func (UnimplementedTigerBeetleServer) LookupAccounts(context.Context, *LookupAccountsRequest) (*LookupAccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAccounts not implemented")
}
func (UnimplementedTigerBeetleServer) LookupTransfers(context.Context, *LookupTransfersRequest) (*LookupTransfersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupTransfers not implemented")
}
func (UnimplementedTigerBeetleServer) GetAccountTransfers(context.Context, *GetAccountTransfersRequest) (*GetAccountTransfersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountTransfers not implemented")
}
func (UnimplementedTigerBeetleServer) GetAccountBalances(context.Context, *GetAccountBalancesRequest) (*GetAccountBalancesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalances not implemented")
}
func (UnimplementedTigerBeetleServer) mustEmbedUnimplementedTigerBeetleServer() {}
func (UnimplementedTigerBeetleServer) testEmbeddedByValue()                     {}

// UnsafeTigerBeetleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TigerBeetleServer will
// result in compilation errors.
type UnsafeTigerBeetleServer interface {
	mustEmbedUnimplementedTigerBeetleServer()
}

func RegisterTigerBeetleServer(s grpc.ServiceRegistrar, srv TigerBeetleServer) {
	// If the following call pancis, it indicates UnimplementedTigerBeetleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TigerBeetle_ServiceDesc, srv)
}

func _TigerBeetle_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerBeetleServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TigerBeetle_GetID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerBeetleServer).GetID(ctx, req.(*GetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerBeetle_CreateAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerBeetleServer).CreateAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TigerBeetle_CreateAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerBeetleServer).CreateAccounts(ctx, req.(*CreateAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerBeetle_CreateTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerBeetleServer).CreateTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TigerBeetle_CreateTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerBeetleServer).CreateTransfers(ctx, req.(*CreateTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerBeetle_LookupAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerBeetleServer).LookupAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TigerBeetle_LookupAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerBeetleServer).LookupAccounts(ctx, req.(*LookupAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerBeetle_LookupTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerBeetleServer).LookupTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TigerBeetle_LookupTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerBeetleServer).LookupTransfers(ctx, req.(*LookupTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerBeetle_GetAccountTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerBeetleServer).GetAccountTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TigerBeetle_GetAccountTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerBeetleServer).GetAccountTransfers(ctx, req.(*GetAccountTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerBeetle_GetAccountBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerBeetleServer).GetAccountBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TigerBeetle_GetAccountBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerBeetleServer).GetAccountBalances(ctx, req.(*GetAccountBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TigerBeetle_ServiceDesc is the grpc.ServiceDesc for TigerBeetle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TigerBeetle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TigerBeetle",
	HandlerType: (*TigerBeetleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetID",
			Handler:    _TigerBeetle_GetID_Handler,
		},
		{
			MethodName: "CreateAccounts",
			Handler:    _TigerBeetle_CreateAccounts_Handler,
		},
		{
			MethodName: "CreateTransfers",
			Handler:    _TigerBeetle_CreateTransfers_Handler,
		},
		{
			MethodName: "LookupAccounts",
			Handler:    _TigerBeetle_LookupAccounts_Handler,
		},
		{
			MethodName: "LookupTransfers",
			Handler:    _TigerBeetle_LookupTransfers_Handler,
		},
		{
			MethodName: "GetAccountTransfers",
			Handler:    _TigerBeetle_GetAccountTransfers_Handler,
		},
		{
			MethodName: "GetAccountBalances",
			Handler:    _TigerBeetle_GetAccountBalances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tigerbeetle/tigerbeetle.proto",
}
